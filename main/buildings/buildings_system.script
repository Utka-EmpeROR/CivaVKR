require "main/modules/map"
require "main/modules/units"
require "main/modules/buildings"
require "main/modules/resources"

function init(self)
	-- Add initialization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

local function set_building_hp(building)
	local url = msg.url(nil, building.go, "hp")
	label.set_text(url, building.current_hp .. "/" .. building.max_hp)
end

local function _spawn_building(q, r, properties, side)
	local building = factory.create("#buildings_factory")
	local new_properties = properties
	new_properties.go = building
	new_properties.side = side
	set_building_data(q, r, new_properties)
	msg.post(building, "play_animation", { id = hash(properties.type) })
	local real_coordinates = get_real_coordinates_for_buildings(q, r)
	local tint = vmath.vector4(1, 1, 1, 1)
	if (side == 1) then
		tint.x = 0
		tint.z = 0
	elseif (side == 2) then
		tint.y = 0
		tint.z = 0
	end
	local url = msg.url(nil, building, "sprite")
	go.set(url, "tint", tint)
	go.set_position(real_coordinates, building)
	set_building_hp(get_building(q, r))
	remove_resources(side, properties.cost)
end

function spawn_building(q, r, type, side)
	_spawn_building(q, r, get_building_properties(type), side)
	if (type == "collector") then
		local hex = get_hex(q, r)
		local resource_type = get_resource_by_type(hex.type)
		resources_table[side][resource_type .. "_income"] = resources_table[side][resource_type .. "_income"] + 1
	end
end

function destroy_building(building_q, building_r)
	local building = get_building(building_q, building_r)
	if (building.type == "collector") then
		local hex = get_hex(q, r)
		local resource_type = get_resource_by_type(hex.type)
		resources_table[building.side][resource_type .. "_income"] = resources_table[building.side]
			[resource_type .. "_income"] + 1
	end
	buildings_table[get_building_key(building_q, building_r)] = nil
	go.delete(building.go)
end

---Does damage to defender, for now without any counterattacks and changing places
---@param defender_q integer
---@param defender_r integer
---@param attacker_q integer
---@param attacker_r integer
local function do_damage_by_coordinates(defender_q, defender_r, attacker_q, attacker_r)
	-- later some animations
	local defender = get_unit(defender_q, defender_r)
	local attacker = get_unit(attacker_q, attacker_r)
	attacker.can_attack = false
	defender.current_hp = defender.current_hp - (attacker.attack)
	set_building_hp(defender)
	if (defender.current_hp <= 0) then
		destroy_building(defender_q, defender_r)
	end
end

---Does damage to defender by tower
---@param defender_q integer
---@param defender_r integer
local function do_damage_by_tower(defender_q, defender_r, attacker_q, attacker_r)
	-- later some animations
	local defender = get_building(defender_q, defender_r)
	defender.current_hp = defender.current_hp - tower_damage
	set_building_hp(defender)
	if (defender.current_hp <= 0) then
		destroy_building(defender_q, defender_r)
	end
end

function on_message(self, message_id, message, sender)
	if (message_id == hash("spawn_building")) then
		spawn_building(message.q, message.r, message.type, message.side)
	elseif (message_id == hash("do_damage")) then
		do_damage_by_coordinates(message.q, message.r, message.new_q, message.new_r)
	elseif (message_id == hash("do_damage_by_tower")) then
		do_damage_by_tower(message.q, message.r)
	elseif (message_id == hash("new_step")) then
		local side = message.side
		for q = -map_size, map_size, 1 do
			for r = map_size, -map_size, -1 do
				if (-q - r >= -map_size) and (-q - r <= map_size) then
					local building = get_building(q, r)
					if building ~= nil and building.side == side then
						if (building.type == "tower") then
							local hexes = hexes_in_range({ q, r }, tower_attack_range)
							for _, hex in ipairs(hexes) do
								local unit_to_attack = get_unit(hex[1], hex[2])
								local building_to_attack = get_building(hex[1], hex[2])
								if (unit_to_attack ~= nil and unit_to_attack.side ~= side) then
									msg.post("#units_system", "do_damage_by_tower", { q = hex[1], r = hex[2] })
								elseif (building_to_attack ~= nil and building_to_attack.side ~= side) then
									msg.post("#buildings_system", "do_damage_by_tower", { q = hex[1], r = hex[2] })
								end
							end
						end
					end
				end
			end
		end
	end
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
