
ýD
áDrequire "main/modules/resources"

local active_icons = {}

function init(self)
	self.selected_unit = nil
	self.selected_unit_q = nil
	self.selected_unit_r = nil
	self.selected_unit_to_spawn = nil
	-- Add initialization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

local function show_icons(hexes, type)
	for _, pair in ipairs(hexes) do
		local coordinates = get_real_coordinates_for_units(pair[1], pair[2])
		coordinates.z = 1
		local icon = factory.create("#icon_factory", coordinates)
		msg.post(icon, "play_animation", { id = hash(type) })
		table.insert(active_icons, icon)
	end
end

local function hide_icons(self)
	for _, icon in ipairs(active_icons) do
		go.delete(icon)
	end
	active_icons = {}
end


local function deselect_unit(self)
	print("deselect")
	local original_unit = self.selected_unit
	self.selected_unit = nil
	self.selected_unit_q = nil
	self.selected_unit_r = nil
	hide_icons()
	if (original_unit == nil) then
		return
	end
	print("canceled anim for " .. original_unit.name)
	go.cancel_animations(original_unit.go)
	go.set_scale(1, original_unit.go)
end


local function show_possible_moves(self)
	local reachable = hex_reachable({ self.selected_unit_q, self.selected_unit_r },
		self.selected_unit.current_movement_distance, 0)
	show_icons(reachable, "move_icon")
	local attack_reachable = hexes_in_range({ self.selected_unit_q, self.selected_unit_r },
		self.selected_unit.attack_range)
	local can_actually_attack = {}
	if (self.selected_unit.can_attack) then
		for _, hex in ipairs(attack_reachable) do
			local q = hex[1]
			local r = hex[2]
			local unit = get_unit(q, r)
			if (unit ~= nil and unit.side ~= self.selected_unit.side) then
				table.insert(can_actually_attack, hex)
			end
		end
	end
	show_icons(can_actually_attack, "attack_icon")
end

local function check_possibility_to_select(self, q, r)
	local selection_unit = get_unit(q, r)
	if selection_unit ~= nil and selection_unit.name ~= "castle" and selection_unit.side == player_id then
		if self.selected_unit_to_spawn == nil then
			return true
		end
	end
	return false
end

local function check_possibility_to_select_opponent(self, q, r)
	local selection_unit = get_unit(q, r)
	if selection_unit ~= nil and selection_unit.name ~= "castle" and selection_unit.side ~= player_id then
		if self.selected_unit_to_spawn == nil then
			return true
		end
	end
	return false
end

local function check_possibility_to_spawn_unit(self, q, r)
	if (can_buy_by_cost(player_id, get_unit_properties(self.selected_unit_to_spawn).cost) and
			get_distance(q, r, castles_positions[player_id][1], castles_positions[player_id][2]) == 1 and
			get_unit(q, r) == nil and
			hex_in_map({ q, r })) then
		return true
	end
	return false
end

local function check_possibility_to_spawn_building(self, q, r)
	if (can_buy_by_cost(player_id, get_building_properties(self.selected_building_to_spawn).cost) and
			get_distance(q, r, castles_positions[player_id][1], castles_positions[player_id][2]) < 5 and
			get_unit(q, r) == nil and
			get_building(q, r) == nil and
			hex_in_map({ q, r })) then
		return true
	end
	return false
end

local function check_possibility_to_attack(self, q, r)
	local selection_unit = get_unit(q, r)
	if (selection_unit ~= nil and
			self.selected_unit.side ~= selection_unit.side and
			self.selected_unit.side == player_id and
			self.selected_unit.can_attack == true and
			get_distance(self.selected_unit_q, self.selected_unit_r, q, r)
			<= self.selected_unit.attack_range) then
		return true
	end
	return false
end

local function check_possibility_to_attack_building(self, q, r)
	local selection_building = get_building(q, r)
	local selection_unit = get_unit(q, r)
	if (selection_building ~= nil and
			selection_unit == nil and
			self.selected_unit.side ~= selection_building.side and
			self.selected_unit.side == player_id and
			self.selected_unit.can_attack == true and
			get_distance(self.selected_unit_q, self.selected_unit_r, q, r)
			<= self.selected_unit.attack_range) then
		return true
	end
	return false
end

local function check_possibility_to_move(self, q, r)
	return is_in_table(
			{ q, r },
			hex_reachable({ self.selected_unit_q, self.selected_unit_r }, self.selected_unit.current_movement_distance, 0)) and
		self.selected_unit.side == player_id
end

local function do_damage(defender_q, defender_r, attacker_q, attacker_r)
	msg.post("game#units_system", "do_damage",
		{ q = defender_q, r = defender_r, new_q = attacker_q, new_r = attacker_r })
end


local function do_damage_to_building(defender_q, defender_r, attacker_q, attacker_r)
	msg.post("game#buildings_system", "do_damage",
		{ q = defender_q, r = defender_r, new_q = attacker_q, new_r = attacker_r })
end

local function select_unit(self, q, r)
	local unit = get_unit(q, r)
	self.selected_unit = unit
	self.selected_unit_q = q
	self.selected_unit_r = r
	go.animate(unit.go, "scale", go.PLAYBACK_LOOP_PINGPONG, 1.1, go.EASING_OUTQUAD, 1)
	show_possible_moves(self)
	msg.post("gui", "select_unit", { q = q, r = r })
end

local function select_opponent_unit(self, q, r)
	local unit = get_unit(q, r)
	self.selected_unit = unit
	self.selected_unit_q = q
	self.selected_unit_r = r
	go.animate(unit.go, "scale", go.PLAYBACK_LOOP_PINGPONG, 1.1, go.EASING_OUTQUAD, 1)
	-- show_possible_moves(self)
	msg.post("gui", "select_opponent_unit", { q = q, r = r })
end

function on_message(self, message_id, message, sender)
	if (message_id == hash("click_on_map")) then
		print("click on map")
		local mouse_x = message.action.x
		local mouse_y = message.action.y
		self.selected_unit_to_spawn = message.selected_unit_to_spawn
		self.selected_building_to_spawn = message.selected_building_to_spawn
		local camera_position = go.get_position()
		local real_mouse_x = mouse_x + camera_position.x
		local real_mouse_y = mouse_y + camera_position.y
		local q_position, r_position = get_cube_coordinates(real_mouse_x, real_mouse_y)

		if (self.selected_unit ~= nil) then
			if (check_possibility_to_attack(self, q_position, r_position)) then
				do_damage(q_position, r_position, self.selected_unit_q, self.selected_unit_r)
			elseif check_possibility_to_attack_building(self, q_position, r_position) then
				do_damage_to_building(q_position, r_position, self.selected_unit_q, self.selected_unit_r)
			elseif check_possibility_to_move(self, q_position, r_position) then
				msg.post("game", "move_unit",
					{ q = self.selected_unit_q, r = self.selected_unit_r, new_q = q_position, new_r = r_position })
			end
			deselect_unit(self)
		else
			if (self.selected_unit_to_spawn ~= nil) then
				print("trying to spawn unit")
				if (check_possibility_to_spawn_unit(self, q_position, r_position)) then
					msg.post("game", "spawn_unit",
						{ q = q_position, r = r_position, name = self.selected_unit_to_spawn, side = player_id })
				else
					print('can not spawn unit')
				end
				deselect_unit(self)
			elseif (self.selected_building_to_spawn ~= nil) then
				print("trying to spawn building")
				if (check_possibility_to_spawn_building(self, q_position, r_position)) then
					msg.post("game", "spawn_building",
						{ q = q_position, r = r_position, type = self.selected_building_to_spawn, side = player_id })
				else
					print('can not spawn building')
				end
				deselect_unit(self)
			else
				if check_possibility_to_select(self, q_position, r_position) then
					select_unit(self, q_position, r_position)
				elseif check_possibility_to_select_opponent(self, q, r) then
					-- may be smth interesting, but for now nothing
					select_opponent_unit(self, q_position, r_position)
				end
			end
		end
	elseif (message_id == hash("glow_on_selection_spawn")) then
		local reachable = hex_reachable({ castles_positions[player_id][1], castles_positions[player_id][2] }, 1, 0)
		show_icons(reachable, "spawn_icon")
	elseif (message_id == hash("glow_on_building_spawn")) then
		local reachable = hex_reachable({ castles_positions[player_id][1], castles_positions[player_id][2] }, 4, 0)
		show_icons(reachable, "spawn_icon")
	elseif (message_id == hash("end_turn")) then
		deselect_unit(self)
	elseif (message_id == hash("hide_icons")) then
		deselect_unit(self)
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
@main/gui/map_ui.scriptmain/modules/resources/main/modules/resources.luac" 